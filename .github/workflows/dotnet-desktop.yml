# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

#    env:
#      Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
#      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
#      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
#      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
       dotnet-version: 8.0.x

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: List folder
      run: ls

    - name: Publish
      run: dotnet publish ./Intelica.Authentication.Backend/Intelica.Authentication.API/Intelica.Authentication.API.csproj --framework net8.0 -c Release -o /app/publish

    - name: List folder
      run: cd /app/publish

    - name: List folder
      run: ls
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      


    - name: Docker Login
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
      uses: docker/login-action@v3.3.0
      with:
        # Server address of Docker registry. If not set then will default to Docker Hub
        #registry: Docker Hub
        # Username used to log against the Docker registry
        username: ${{ secrets.DockerHubName }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DockerHubPassword }}
        # Specifies whether the given registry is ECR (auto, true or false)
        ecr: false
        # Log out from the Docker registry at the end of a job
        #logout: # optional, default is true
    - name: Build and push Docker images
      # You may pin to the exact commit or the version.
      # uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
      uses: docker/build-push-action@v6.9.0
      with:
        # Push is a shorthand for --output=type=registry
        push: true
        # Generate SBOM attestation for the build (shorthand for --attest=type=sbom)        
        tags: fullhendrix/authentication.backend:latest
    
    

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Execute unit tests
      #run: dotnet build

    # Execute all unit tests in the solution
    #- name: Execute unit tests
      #run: dotnet test


